---
# File: tasks/install.yml - package installation tasks for vault

- name: OS packages
  package:
    name: "{{ item }}"
    state: present
  with_items:
  - unzip

- debug:
    msg: "vault_version={{vault_version}}"
    verbosity: 2

- name: Check Vault package checksum file
  become: no
  connection: local
  stat:
    path: "{{ role_path }}/files/vault_{{ vault_version }}_SHA256SUMS"
  run_once: true
  register: vault_checksum

- name: Get Vault package checksum file
  become: no
  connection: local
  get_url:
    url: "{{ vault_checksum_file_url }}"
    dest: "{{ role_path }}/files/vault_{{ vault_version }}_SHA256SUMS"
  run_once: true
  tags: installation
  when: vault_checksum.stat.exists == False

- name: Get Vault package checksum
  become: no
  connection: local
  shell: "grep {{ vault_pkg }} {{ role_path }}/files/vault_{{ vault_version }}_SHA256SUMS"
  run_once: true
  register: vault_sha256
  tags: installation

- name: Check Vault package file
  become: no
  connection: local
  stat:
    path: "{{ role_path }}/files/{{ vault_pkg }}"
  run_once: true
  register: vault_package

- name: Download Vault
  become: no
  connection: local
  get_url:
    url: "{{ vault_zip_url }}"
    dest: "{{ role_path }}/files/{{ vault_pkg }}"
    checksum: "sha256:{{ vault_sha256.stdout.split(' ')|first }}"
    timeout: 42
  run_once: true
  when: vault_package.stat.exists == False

- name: Unarchive Vault
  become: no
  connection: local
  unarchive:
    src: "{{ role_path }}/files/{{ vault_pkg }}"
    dest: "{{ role_path }}/files/"
  run_once: true

- name: check vault already installed
  stat:
     path: "{{ vault_bin_path }}/vault"
  register: vault_bin

- name: default extract version
  set_fact:
    extracted_version: "0.0.0"

- name: extract installed vault version
  block:
  - name: parse vault version
    shell: "vault version"
    register: vault_installed_version
    changed_when: False

  - name: vault version
    debug:
      msg: "{{vault_installed_version}}"
      verbosity: 2

  - name: extract version
    set_fact:
      extracted_version: "{{ vault_installed_version.stdout | regex_search(regexp,'\\1') }}"
    vars:
      regexp: 'v(\d+.\d+.\d+).'
  - name: extracted version
    debug:
      msg: "{{extracted_version}}"
      verbosity: 2
  - name: vault_version
    debug:
      msg: "{{vault_version}}"
      verbosity: 2    
  when: vault_bin.stat.exists == True

- name: Install Vault
  copy:
    src: "{{ role_path }}/files/vault"
    dest: "{{ vault_bin_path }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0755
    force: True
  when: (vault_version is version_compare(extracted_version, '<')) or
    (vault_bin.stat.exists == False)

#- name: Cleanup
#  become: no
#  connection: local
#  file:
#    dest: "{{ role_path }}/files/vault*"
#    state: absent
#  run_once: true
